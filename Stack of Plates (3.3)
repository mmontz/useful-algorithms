class SetOfStacks {
    int threshold;
    class Stack{
        vector <int> S;
    public:
        void POP (){
            if (S.empty())
                return;
            S.erase(S.begin() + S.size()-1);
        }
        void PUSH (int x){
            S.push_back(x);
        }
        int TOP(){
            if (S.empty())
                return -1;
            return S[S.size()-1];
        }
        bool isempty (){
            if (S.empty())
                return true;
            return false;
        }
        int SIZE(){
            return S.size();
        }
        void rewrite(int index1 , int index2){
            if (index1<0 || index2<0 || index1 >= S.size() || index2>= S.size())
                return;
            S[index1] = S[index2];
        }
        
        int atIndex (int i){
            if (i<0 || i >= S.size())
                return -1;
            return S[i];
        }
    };
    
    vector <Stack> AllStacks;
    SetOfStacks (int x){threshold = x;};

    void POP (){
        if (AllStacks.empty())
            return;
        AllStacks[AllStacks.size()-1].POP();
        if (AllStacks[AllStacks.size()-1].isempty())
            AllStacks.erase(AllStacks.begin()+ AllStacks.size()-1);
    }
    void PUSH (int x){
        if (AllStacks.empty() || AllStacks[AllStacks.size()-1].SIZE() >= threshold){
            Stack newstack;
            newstack.PUSH(x);
            AllStacks.push_back(newstack);
        }
        else
            AllStacks[AllStacks.size()-1].PUSH(x);
    }
    int TOP (){
        if (AllStacks.empty())
            return -1;
        return AllStacks[AllStacks.size()-1].TOP();
    }
    
    void ShiftToLeft (int index){
        AllStacks[index-1].PUSH(AllStacks[index].atIndex(0)); //bottom
        for (int i=1 ; i<AllStacks[index].SIZE() ; i++){
            AllStacks[index].rewrite(i-1, i);
        }
        AllStacks[index].POP();
    }
    
    void PopAt (int index){ // with rollover
        if (!(0<=index && index < AllStacks.size()))
            return;
        AllStacks[index].POP();
        for (int i=index+1 ; i<AllStacks.size() ; i++)
            ShiftToLeft (i);
        
        if (AllStacks[AllStacks.size()-1].isempty())
            AllStacks.erase(AllStacks.begin()+AllStacks.size()-1);
    }
};
